Question link-https://www.codechef.com/problems/CHEFCCYL
solution:-
#include<bits/stdc++.h>
using namespace std;
 
struct node{
  int v1;
  int v2;
  int w;
};
 
int main(){
  int t;
  cin>>t;
  while(t--){
    int n,q;
    cin>>n>>q;
    vector<int>a[n];      //For keeping the weight of nodes of cycle
    vector<int>b[n];      //For keeping some refined form of it
    vector<int>c[n];      //For keeping some refined form of it
    vector<int>d[n];      //Most refined form from one vertex
    vector<int>b1[n];     //For keeping some refined form from the other side
    vector<int>c1[n];     //For keeping most refined form from the other side
    vector<int>d1[n];     //Most refined form of other vertex
    int e[n];             //weight due to v1
    int e1[n];            //weight due to v2
    node s[n];
    int len[n];                     //length of each cycle
    for(int i=0;i<n;i++){           //Storing the weight of the nodes of all the cycles
      //cout<<"Enter the number of nodes in cycle\n";
      cin>>len[i];
      int a1=len[i];
      for(int j=0;j<a1;j++){
        //cout<<"Enter the weight of each node\n";
        int t1;
        cin>>t1;
        a[i].push_back(t1);
      }
    }
    for(int i=0;i<n;i++){       //Storing the nodes of two cycles and their weight
      //cout<<"Enter v1\n";
      cin>>s[i].v1;
      //cout<<"Enter v2\n";
      cin>>s[i].v2;
      //cout<<"Enter w\n";
      cin>>s[i].w;
    }
    for(int i=0;i<n;i++){
      int t2 = s[i].v1;
      int l=len[i];
      int sum=0;
      int sum1=0;
      //cout<<"The value of cumulative sum due to v1 is \n";
      for(int j=t2;j<t2+l;j++){ //For cumulative sum of edges from opening points shifted by v1
        //int k=j-t2;
        if(j==t2){
          sum=0;
        }
        else{
          sum+=a[i][(j-2)%l];
        }
        b[i].push_back(sum);
        //cout<<sum<<" ";
      }
      //cout<<endl<<"The cumulative sum from backward direction due to v1 is \n";
      int xz_1=t2-2;
      if(xz_1<0){
        xz_1=l+xz_1;
      }
      sum1=sum + a[i][xz_1];
      for(int i1=t2;i1<t2+l;i1++){
        int j=i1-t2;
        if(i1==t2){
          int sd=0;
          c[i].push_back(sd);
        }
        else{
          sum1-=a[i][(i1-2)%l];
          c[i].push_back(sum1);
        }
       // cout<<c[i][j]<<" ";
      }
      //cout<<endl<<"\n"<<"The minimum distance from v1 is \n";
      for(int i2=0;i2<l;i2++){
        d[i].push_back(min(b[i][i2],c[i][i2]));
        //cout<<d[i][i2]<<" ";
      }
     
      //For other node
      int t_4=i-1;
      if(t_4<0){
        t_4=n+t_4;
      }
      int t3 = s[t_4].v2;
      int sum2=0;
      int sum3=0; 
       for(int j=t3;j<t3+len[i];j++){ 
        if(j==t3){
          sum2=0;
        }
        else{
          sum2+=a[i][(j-2)%l];
        }
        b1[i].push_back(sum2);
       // cout<<sum2<<" ";
      }
      int xz_2=t3-2;
      if(xz_2<0){
        xz_2=l+xz_2;
      }
      sum3=sum2+a[i][xz_2];
      //cout<<endl<<"The value of sum from backward is "<<sum3;
      //cout<<endl<<"The value of cumulative sum due to v2 is \n";
      
      for(int i1=t3;i1<t3+l;i1++){
        int j=i1-t3;
        if(i1==t3){
          int xe=0;
          c1[i].push_back(xe);
        }
        else{
          sum3-=a[i][(i1-2)%l];
          c1[i].push_back(sum3);
        }
        //cout<<c1[i][j]<<" ";
      }
      //cout<<endl<<"The minimum distance from v2 is \n";
      for(int i2=0;i2<l;i2++){
        d1[i].push_back(min(b1[i][i2],c1[i][i2]));
        //cout<<d1[i][i2]<<" ";
      }
      //cout<<endl;
    }    //Till here correct
    int s_1=0;
    int s_2=0;
    for(int i=0;i<n;i++){
      int l_1=len[i];
      if(i==0){
        s_1=0;
      }
      else{
          int t_1=s[i-1].w;
          int t_2=s[i].v1;
          int t_5=i-1;
          int t_3=s[t_5].v2;
          int t_6=t_3-t_2;
          if(t_6<0){
            t_6=l_1+t_6;
          }
          s_1+=t_1+d[i][t_6];
      }
      e[i]=s_1;
      //cout<<e[i]<<" ";
    }
    //cout<<endl;
    
    int n_1=s[0].v1;
    int n_2=s[n-1].v2;
    int d_1=n_2-n_1;
    if(d_1<0){
      d_1=len[0]+d_1;
    }
    s_2=s_1+s[n-1].w + d[0][d_1];
    for(int i=0;i<n;i++){
      if(i==0){
        e1[i]=0;
      }
      else{
        int t_1=s[i-1].w;
        int t_2=s[i-1].v1;
        int t_5=i-2;
        if(t_5<0){
          t_5=n-1;
        }
        int t_3=s[t_5].v2;
         int t_6=t_3-t_2;
          if(t_6<0){
            t_6=len[i-1]+t_6;
          }
        s_2=s_2-t_1-d[i-1][t_6];
        e1[i]=s_2;
      }
    }
    for(int x_i=0;x_i<q;x_i++){                     //for queries
      int x1,c1,x2,c2;
      //cout<<"Enter x1 c1 x2 c2\n";
      cin>>x1>>c1>>x2>>c2;
      int c_1=min(c2,c1);
      int c_2=max(c2,c1);
      if(c1>c2){
        int temp=x2;  x2=x1;  x1=temp;
      }
      //c1=c_1;
      //c2=c_2;
      int x3=s[c_1-1].v1;
      int x4=c_1-2;
      if(x4<0){
        x4=n+x4;
      }
      int x5=s[x4].v2;
      int d11=x1-x3;
      if(d11<0){
        d11=len[c_1-1]+d11;
      }
      int add1=d[c_1-1][d11];
      int d22=x1-x5;
      if(d22<0){
        d22=len[c_1-1]+d22;
      }
      int add2=d1[c_1-1][d22];
      
      int x_3=s[c_2-1].v1;
      int x_4=c_2-2;
      if(x_4<0){
        x_4=n+x_4;
      }
      int x_5=s[x_4].v2;
      int d_11=x2-x_3;
      if(d_11<0){
        d_11=len[c_2-1]+d_11;
      }
      int add_1=d[c_2-1][d_11];
      int d_22=x2-x_5;
      if(d_22<0){
        d_22=len[c_2-1]+d_22;
      }
      int add_2=d1[c_2-1][d_22];
      
      int vertex_1=s[c_2-1].v1;
      int vertex_2=s[c_2-2].v2;
      int distance_1=vertex_2-vertex_1;
      if(distance_1<0){
        distance_1=len[c_2-1]+distance_1;
      }
      int Dis1 = d[c_2-1][distance_1];
      int vertex_3 = s[c_1-1].v1;
      int vb = c_1-2;
      if(vb<0){
        vb=n+vb;
      }
      int vertex_4=s[vb].v2;
      int distance_2=vertex_4-vertex_3;
      if(distance_2<0){
        distance_2=len[c_1-1]+distance_2;
      }
      int Dis2 = d[c_1-1][distance_2];
      int sum_one=add1+add_2;
      int sum_two=add2+add_1;
      int weight1=abs(e[c_2-1]-e[c_1-1]);
      int weight2=abs(e1[c_2-1]-e1[c_1-1]);
      int totat1=weight1+sum_one-Dis1;
     // int total2=weight2+sum_two-Dis2;
     int fg_1=s[0].v1;
     int fg_2=s[n-1].v2;
     int r_54=fg_2-fg_1;
     if(r_54<0){
       r_54=len[0]+r_54;
     }
     int dist_56=d[0][r_54];
     int total2=e1[c_2-1]-Dis1+sum_two+dist_56+e[c_1-1]-Dis2;
      cout<<min(total2,totat1)<<"\n";
    }
  }
} 
